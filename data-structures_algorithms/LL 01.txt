struct node
{
int data;
struct node* link;
};

struct node* root = NULL; //global variable


void append ()
{
struct node* temp;  //local variable
temp = (struct node*)malloc (sizeof (struct node));

printf ("Enter node data:");
scanf ("%d",& temp ->data);
temp ->link = NULL;

if (root == NULL) //list is empty
{
root =temp;
}
else
{
	struct node* p;
	p=root;
	
	while (p ->link != NULL)
	{
		p = p -> link;			
	}
	
	p->link =temp;	
}
}


int length ()
{
	int count = 0;
	struct node* temp;
	temp = root;
	
	while (temp != NULL)
	{
	count ++;
	temp = temp ->link;
	}
	
	return count;
}

void addatbegin()
{
struct node* temp;
temp = (struct node*)malloc(sizeof(struct node));
printf ("Enter the node data");
scanf("%d", &temp->data);
temp->link= NULL;
if (root == NULL)
{
root=temp;
}
else
{
temp->link=root; // [right connection]
root=temp; //[left connection]
}

}


void display()
{
struct node* temp;
temp = root;

if (temp = NULL)
{
 printf("List is empty");
}

else
{
while (temp != NULL)
{
	printf ("%d ->", temp->data);
	temp = temp->link;
}
printf ("This is the list");
}

}


void delete()
{

struct node* temp;
int location;
printf("Enter the location to delete: ");
scanf("%d", &location);

if (location > length())
{
printf("Invalid location.");
}

else if (location == 1)
{
temp =root;
root = temp->link;
temp->link = NULL;
free (temp);
} 

else ()
{
	struct node* p = root, *q;
	int i=1;

	while(i< location-1)
	{
		p = p->link;
		i++;
	}
	
	q = p->link;
	p->link = q->link; 
	q->link = NULL;
	free(q);
	
}

}


void addafter()
{
struct node* temp, *p;
int location, len, i=1;

printf("Enter the location:");
scanf("%d", &location);

len= length();

if (location > len)
{
printf("Invalid location");
printf("Currently, list is having, %d nodes", len);
}

else
{
p=root;

while (i<location)
{
p = p->link;
i++;
}

temp= (struct node*)malloc(sizeof(struct node));
// read node data & size NULL
temp->link = p->link; //[right connection]
p->link = temp; //[left connection] 
}

}



node_swap()
{
i=1;
p=root;

while(i< location-1)
{
p= p->next;
i++;
}

q= p->next;
r= q->next;

q->next = r->next;
r->next = q;
p->next = r;
}


void Reverse_List()
{
int i, j, len;
struct node *p, *q;
len= length();

i=0;
j=len-1;
p=q=root;

while (i<j)
{
k=0;
while(k<j)
{
q= q->link;
k++;
}

temp = p->data;
p->data = q->data;
q->data = temp;

i++;
j--;

p = p->link;
q = root;
}

}
===========================================================
void Array_reverse()
{
i=0;
j=n-1;

while(i<j)
{
temp=a[i];
a[i]=a[j];
a[j]=temp;
}
i++,j--;
}



